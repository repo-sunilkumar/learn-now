&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px; font-weight: bold; text-decoration: underline;&quot;&gt;Static Class:&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px; font-weight: bold; text-decoration: underline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;A static class is basically the same as a non-static class, but there is one difference: &lt;b&gt;a static class cannot be instantiated&lt;/b&gt;. In other words, you cannot use the new keyword to create a variable of the class type. Because there is no instance variable, you access the members of a static class by using the class name itself. For example, if you have a static class that is named &lt;i&gt;MyStaticClass&lt;/i&gt; that has a public method named &lt;i&gt;MethodA&lt;/i&gt;, you call the method as shown in the following example:&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;MyStaticClass.MethodA();&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;A static class can be used as a convenient container for sets of methods that just operate on input parameters and do not have to get or set any internal instance fields. For example, in the .NET Framework Class Library, the static System.Math class contains methods that perform mathematical operations, without any requirement to store or retrieve data that is unique to a particular instance of the Math class. That is, you apply the members of the class by specifying the class name and the method name, as shown in the following example.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;double dub = -3.14;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;Console.WriteLine(Math.Abs(dub));&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;Console.WriteLine(Math.Floor(dub));&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;Console.WriteLine(Math.Round(Math.Abs(dub)));&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;// Output:&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;// 3.14&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;// -4&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;// 3&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;As is the case with all class types, the type information for a static class is loaded by the .NET Framework common language runtime (CLR) when the program that references the class is loaded. The program cannot specify exactly when the class is loaded. However, it is guaranteed to be loaded and to have its fields initialized and its static constructor called before the class is referenced for the first time in your program. A static constructor is only called one time, and a static class remains in memory for the lifetime of the application domain in which your program resides.&amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;b&gt;The following list provides the main features of a static class:&lt;/b&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;Contains only static members.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;Cannot be instantiated.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;Is sealed.&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;Cannot contain Instance Constructors.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;Creating a static class is therefore basically the same as creating a class that contains only static members and a private constructor. &lt;span style=&quot;font-weight: bold;&quot;&gt;A private constructor prevents the class from being instantiated&lt;/span&gt;. The advantage of using a static class is that the compiler can check to make sure that no instance members are accidentally added. The compiler will guarantee that instances of this class cannot be created.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;Static classes are &lt;span style=&quot;font-weight: bold;&quot;&gt;sealed&lt;/span&gt; and therefore cannot be inherited. They cannot inherit from any class except Object. Static classes cannot contain an instance constructor; however, they can contain a static constructor. Non-static classes should also define a static constructor if the class contains static members that require non-trivial initialization.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px; font-weight: bold; text-decoration: underline;&quot;&gt;Static Members:&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;A non-static class can contain static methods, fields, properties, or events.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;The static member is callable on a class even when no instance of the class has been created.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;The static member is always accessed by the class name, not the instance name.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;Only one copy of a static member exists, regardless of how many instances of the class are created.&amp;nbsp;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;Static methods and properties cannot access non-static fields and events in their containing type, and they cannot access an instance variable of any object unless it is explicitly passed in a method parameter.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;font-size: 13px; font-family: Arial, Verdana;&quot;&gt;It is more typical to declare a non-static class with some static members, than to declare an entire class as static. &lt;span style=&quot;font-weight: bold;&quot;&gt;Two common uses of static fields are to keep a count of the number of objects that have been instantiated, or to store a value that must be shared among all instances&lt;/span&gt;.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;Static methods can be &lt;span style=&quot;font-weight: bold;&quot;&gt;overloaded&lt;/span&gt; but &lt;span style=&quot;font-weight: bold;&quot;&gt;not&lt;/span&gt; &lt;span style=&quot;font-weight: bold;&quot;&gt;overridden&lt;/span&gt;, because they belong to the class, and not to any instance of the class.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;Although a field cannot be declared as static const, &lt;span style=&quot;font-style: italic;&quot;&gt;a const field is essentially static in its behavior&lt;/span&gt;. It belongs to the type, not to instances of the type. Therefore, const fields can be accessed by using the same &lt;span style=&quot;font-weight: bold;&quot;&gt;ClassName.MemberName&lt;/span&gt; notation that is used for static fields. No object instance is required.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px; font-weight: bold;&quot;&gt;C# does not support static local variables (variables that are declared in method scope).&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;You declare static class members by using the static keyword before the return type of the member, as shown in the following example:&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;public class Vehicle&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;{&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; public static int Wheels = 4;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; public static int GasTank&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; get&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return 15;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; public static void Drive() { }&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; public static event EventType RunOutOfGas;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&amp;nbsp; &amp;nbsp; // Other non-static fields and properties...&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;}&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font face=&quot;Arial, Verdana&quot;&gt;&lt;span style=&quot;font-size: 13px;&quot;&gt;Static members are initialized before the static member is accessed for the first time and before the static constructor, if there is one, is called. To access a static class member, use the name of the class instead of a variable name to specify the location of the member.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;&quot;&gt;&lt;br&gt;&lt;/div&gt;